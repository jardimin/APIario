#!/usr/bin/env ruby

require 'optparse'

ARGV << '-h' if ARGV.empty?

def command?(command)
  system("which #{ command} > /dev/null 2>&1")
end

class CodemCommand
  attr_reader :host, :input, :output, :preset, :notify, :verbose, :silent, :status
  def initialize
    options = {}

    optparse = OptionParser.new do |opts|
      opts.banner = 'Usage: codem [OPTIONS]'
      opts.separator ''

      options[:host] = 'http://127.0.0.1:3000'
      opts.on('-H', '--host [HOST]', 'Host to connect to, defaults to 127.0.0.1:3000') do |h|
        options[:host] = h
      end

      opts.on('-i', '--input [FILE]', 'Input file to convert') do |i|
        options[:input] = i
      end

      opts.on('-o', '--output [FILE]', 'Output file to write to') do |o|
        options[:output] = o
      end

      opts.on('-p', '--preset [NAME]', 'Preset to use') do |p|
        options[:preset] = p
      end

      opts.on('-r', '--priority [INT]', 'Priority, as integer from 1 (highest) to 999 (lowest)') do |r|
        options[:priority] = r
      end

      opts.on('-n', '--notify [LIST]', "List of emails and/or urls separated by comma's to notify when the job is completed") do |n|
        options[:notify] = n
      end

      options[:verbose] = false
      opts.on('-v', '--verbose', 'Print verbose output') do |v|
        options[:verbose] = true
      end

      options[:silent] = false
      opts.on('-s', '--silent', 'Be silent; no output') do |s|
        options[:silent] = true
      end

      options[:status] = false
      opts.on('-S', '--status', 'Only report status code from Scheduler') do |s|
        options[:status] = true
      end

      opts.on('-a', '--arguments [LIST]', 'Comma-separated list of arbitrary key=values to store with the job') do |a|
        options[:arguments] = a
      end

      opts.on_tail('-h', '--help', 'Display this screen') do
        puts opts
        exit
      end
    end

    optparse.parse!

    @input     = options[:input]
    @output    = options[:output]
    @preset    = options[:preset]
    @priority  = options[:priority]
    @host      = options[:host]
    @verbose   = options[:verbose]
    @silent    = options[:silent]
    @host      = options[:host]
    @notify    = options[:notify]
    @status    = options[:status]
    @args      = options[:arguments]

    unless @input && @output && @preset
      puts "ERROR: Not all required parameters (`input', `output', `preset') have been specified"
      exit 1
    end
  end

  def args
    "'input=#{@input}&output=#{@output}&preset=#{@preset}&notify=#{@notify}&arguments=#{@args}&priority=#{@priority}'"
  end

  def run
    if status
      status = %x[#{command}]
      puts status.split("\n").last
    else
      puts Kernel.exec("#{command} #{'>/dev/null 2>&1' if silent}")
    end
  end

  def url
    "'#{@host}/api/jobs'"
  end
end

class CurlCodem < CodemCommand
  def command
    if status
      "curl -w '\n%\{http_code\}' -s -d #{args} -o /dev/null #{url}"
    else
      "curl #{'-v' if verbose} #{'-s' if silent} -d #{args} #{url}"
    end
  end
end

class WgetCodem < CodemCommand
  def command
    if status
      "wget --post-data #{args} #{url} 2>&1 | egrep '^HTTP' | awk {'print $6'}"
    else
      "wget #{verbose ? '-v' : '-nv -q'} -O- --post-data #{args} #{url}"
    end
  end
end

if command?('curl')
 CurlCodem.new.run
elsif command?('wget')
  WgetCodem.new.run
else
 puts "Sorry, we could not locate `curl' or `wget' in the current $PATH:"
 puts "#{ `echo $PATH` }"
end
